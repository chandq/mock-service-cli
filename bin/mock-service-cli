#!/usr/bin/env node

const colors = require('colors/safe'),
  portfinder = require('portfinder'),
  path = require('path'),
  nodemon = require('nodemon');
const argv = require('minimist')(process.argv.slice(2));
const { logger } = require('../lib/utils');
const spawn = require('child_process').spawn;
const node = process.execPath;
process.title = 'mock-service-cli';

if (argv.h || argv.help) {
  console.log(
    [
      'usage: mock-service-cli [options]',
      '',
      'options:',
      '  -p --port    Port to use. If 0, look for open port. [8090]',
      '  -d           Specify mock directory, default [./mock] directory,',
      '               Also watch js files changes and support hot reload',
      '  -f --file     Specify the input data source, support javascript ',
      '                     The priority is over the directory watches',
      '  -s --silent  Suppress log messages from output',
      '  -S --socket-server  Whether start socket server or not, default false.',
      '  -a --api-stat  Whether print api url and file path or not, default false.',
      '  -l --log  Whether record operation info by write file, default false.',
      '  -o --cors-origin   Allow origin by cors, list separated by commas, must not be * when withCredential is true',
      '                     .If specified, cors-headers will be "Authorization,Content-Type,Accept,Origin,User-Agent,DNT',
      '                     ,Cache-Control,X-Mx-ReqToken,X-Data-Type,X-Requested-With,X-Data-Type,X-Auth-Token,Token", default *.',
      '  -H --cors-headers   Optionally provide CORS headers list separated by commas. default *',
      '',
      '  -h --help          Print this list and exit.',
      '  -v --version       Print the version and exit.'
    ].join('\n')
  );
  process.exit();
}

// 保留命令行参数
process.env.ARGV = JSON.stringify(argv);

var port = argv.p || argv.port,
  watchDir = argv.d,
  specifiedFile = argv.f || argv.file,
  version = argv.v || argv.version,
  isStartSocketServer = argv.S || false,
  log = null;

if (!argv.s && !argv.silent) {
  log = logger(false);
} else if (colors) {
  process.env.SILENT = true;
  log = logger(true);
}

if (isStartSocketServer) {
  process.env.SOCKET_SERVER = true;
}

if (version) {
  log.info('v' + require('../package.json').version);
  process.exit();
}

if (argv.o || argv['cors-origin']) {
  process.env.CORS_ORIGIN = argv.o || argv.origin;
}

if (argv.H || argv['cors-headers']) {
  process.env.CORS_HEADERS = argv.H || argv['cors-headers'];
}

if (!port) {
  portfinder.basePort = 8090;
  portfinder.getPort(function (err, port) {
    if (err) {
      throw err;
    }
    process.env.PORT = port;
  });
} else {
  process.env.PORT = port;
}

const watchMockFiles = function (watchDir) {
  /**
   * script 重启的脚本
   * ext 检测的文件
   */
  nodemon({
    script: path.resolve(__dirname, '../lib/mockServer.js'),
    watch: [watchDir],
    ext: 'js,json'
  });

  nodemon
    .on('start', function () {
      // log.info('nodemon: mockServer has started');
    })
    .on('quit', function () {
      // log.info('nodemon: mockServer has quit');
      process.exit();
    })
    .on('restart', function (files) {
      process.env.RESTARTED = true;
      log.info(
        [colors.green('\nnodemon: mockServer restarted due to: '), files, colors.green(' have changed'), '\n'].join('')
      );
    });
};
// Node子进程启动MockServer
const startMockServer = function () {
  spawn(node, [path.resolve(__dirname, '../lib/mockServer.js')], {
    stdio: 'inherit'
  });
};

if (specifiedFile) {
  process.env.SPECIFIED_FILE = path.resolve(process.cwd(), specifiedFile);
  if (isStartSocketServer) {
    startMockServer();
  } else {
    watchMockFiles(process.env.SPECIFIED_FILE);
  }
} else if (watchDir) {
  process.env.SPECIFIED_DIR = path.resolve(process.cwd(), watchDir);
  // log.info('SPECIFIED_DIR::', process.env.SPECIFIED_DIR);
  if (isStartSocketServer) {
    startMockServer();
  } else {
    watchMockFiles(process.env.SPECIFIED_DIR);
  }
} else {
  watchDir = process.env.SPECIFIED_DIR = path.resolve(process.cwd(), './mock');
  // log.info('SPECIFIED_DIR::', process.env.SPECIFIED_DIR);
  if (isStartSocketServer) {
    startMockServer();
  } else {
    watchMockFiles(watchDir);
  }
}
