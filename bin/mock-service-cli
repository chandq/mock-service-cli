#!/usr/bin/env node

const colors = require('colors/safe'),
  portfinder = require('portfinder'),
  path = require('path'),
  nodemon = require('nodemon');
const argv = require('minimist')(process.argv.slice(2));
const { logger } = require('../lib/utils');
process.title = 'mock-service-cli';

if (argv.h || argv.help) {
  console.log(
    [
      'usage: mock-service-cli [options]',
      '',
      'options:',
      '  -p --port    Port to use. If 0, look for open port. [8090]',
      '  -d           Specify mock directory, default [./mock] directory,',
      '               Also watch js files changes and support hot reload',
      '  -f --file     Specify the input data source, support javascript ',
      '                     The priority is over the directory watches',
      '  -s --silent  Suppress log messages from output',
      '',
      '  -h --help          Print this list and exit.',
      '  -v --version       Print the version and exit.'
    ].join('\n')
  );
  process.exit();
}

var port = argv.p || argv.port,
  watchDir = argv.d,
  specifiedFile = argv.f || argv.file,
  version = argv.v || argv.version,
  log;

if (!argv.s && !argv.silent) {
  log = logger(false);
} else if (colors) {
  process.env.SILENT = true;
  log = logger(true);
}

if (version) {
  log.info('v' + require('../package.json').version);
  process.exit();
}

if (!port) {
  portfinder.basePort = 8090;
  portfinder.getPort(function (err, port) {
    if (err) {
      throw err;
    }
    process.env.PORT = port;
  });
} else {
  process.env.PORT = port;
}

const watchMockFiles = function (watchDir) {
  /**
   * script 重启的脚本
   * ext 检测的文件
   */
  nodemon({
    script: path.join(__dirname, '../lib/mockServer.js'),
    watch: [watchDir],
    ext: 'js'
  });

  nodemon
    .on('start', function () {
      // log.info('nodemon: mockServer has started');
    })
    .on('quit', function () {
      // log.info('nodemon: mockServer has quit');
      process.exit();
    })
    .on('restart', function (files) {
      process.env.RESTARTED = true;
      log.info([colors.green('\nnodemon: mockServer restarted due to: '), files, '\n'].join(''));
    });
};

if (specifiedFile) {
  process.env.SPECIFIED_FILE = path.join(process.cwd(), specifiedFile);
  watchMockFiles(process.env.SPECIFIED_FILE);
} else if (watchDir) {
  process.env.SPECIFIED_DIR = path.join(process.cwd(), watchDir);
  // log.info('SPECIFIED_DIR::', process.env.SPECIFIED_DIR);
  watchMockFiles(process.env.SPECIFIED_DIR);
} else {
  watchDir = process.env.SPECIFIED_DIR = path.join(process.cwd(), './mock');
  // log.info('SPECIFIED_DIR::', process.env.SPECIFIED_DIR);
  watchMockFiles(watchDir);
}
